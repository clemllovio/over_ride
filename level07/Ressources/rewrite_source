#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define DATA_SIZE 100

unsigned int get_unum() {
    char buffer[32];
    fgets(buffer, sizeof(buffer), stdin);
    return (unsigned int)strtoul(buffer, NULL, 10);
}

int store_number(unsigned int *data) {
    unsigned int number, index;

    printf(" Number: ");
    number = get_unum();
    printf(" Index: ");
    index = get_unum();

    if ((index % 3 == 0) || ((number >> 24) == 0xB7)) {
        puts(" *** ERROR! ***");
        puts("   This index is reserved for wil!");
        puts(" *** ERROR! ***");
        return 1;
    }

    if (index >= DATA_SIZE) {
        puts(" *** ERROR! Index out of bounds. ***");
        return 1;
    }

    data[index] = number;
    return 0;
}

int read_number(unsigned int *data) {
    unsigned int index;

    printf(" Index: ");
    index = get_unum();

    if (index >= DATA_SIZE) {
        puts(" *** ERROR! Index out of bounds. ***");
        return 1;
    }

    printf(" Number at data[%u] is %u\n", index, data[index]);
    return 0;
}

int main(int argc, char **argv, char **envp) {
    unsigned int data[DATA_SIZE] = {0};
    char command[20];

    // Clear argv and envp from memory
    for (int i = 0; argv[i] != NULL; i++) {
        memset(argv[i], 0, strlen(argv[i]));
    }
    for (int i = 0; envp[i] != NULL; i++) {
        memset(envp[i], 0, strlen(envp[i]));
    }

    puts("----------------------------------------------------");
    puts("  Welcome to wil's crappy number storage service!   ");
    puts("----------------------------------------------------");
    puts(" Commands:                                          ");
    puts("    store - store a number into the data storage    ");
    puts("    read  - read a number from the data storage     ");
    puts("    quit  - exit the program                        ");
    puts("----------------------------------------------------");
    puts("   wil has reserved some storage :>                 ");
    puts("----------------------------------------------------");

    while (1) {
        printf("Input command: ");
        if (!fgets(command, sizeof(command), stdin))
            continue;

        // Remove newline if present
        command[strcspn(command, "\n")] = 0;

        if (strcmp(command, "store") == 0) {
            if (store_number(data) == 0) {
                printf(" Completed %s command successfully\n", command);
            } else {
                printf(" Failed to do %s command\n", command);
            }
        } else if (strcmp(command, "read") == 0) {
            if (read_number(data) == 0) {
                printf(" Completed %s command successfully\n", command);
            } else {
                printf(" Failed to do %s command\n", command);
            }
        } else if (strcmp(command, "quit") == 0) {
            break;
        } else {
            puts(" Unknown command.");
        }

        memset(command, 0, sizeof(command));
    }

    return 0;
}
