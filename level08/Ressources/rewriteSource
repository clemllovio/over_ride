#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>

void log_wrapper(FILE *log_file, const char *prefix, const char *filename) {
    char message[264];
    
    strcpy(message, prefix);
    snprintf(&message[strlen(message)], 254 - strlen(message), "%s", filename);
    
    // Remove newline characters
    message[strcspn(message, "\n")] = '\0';
    
    fprintf(log_file, "LOG: %s\n", message);
}

int main(int argc, const char **argv) {
    FILE *log_file;
    FILE *input_file;
    int output_fd;
    char ch;
    char backup_path[104];
    
    ch = -1;
    
    if (argc != 2) {
        printf("Usage: %s filename\n", argv[0]);
        return 1;
    }
    
    // Open log file
    log_file = fopen("./backups/.log", "w");
    if (!log_file) {
        printf("ERROR: Failed to open %s\n", "./backups/.log");
        exit(1);
    }
    
    // Log start of backup
    log_wrapper(log_file, "Starting back up: ", argv[1]);
    
    // Open input file
    input_file = fopen(argv[1], "r");
    if (!input_file) {
        printf("ERROR: Failed to open %s\n", argv[1]);
        exit(1);
    }
    
    // Create backup file path
    strcpy(backup_path, "./backups/");
    strncat(backup_path, argv[1], 99 - strlen(backup_path));
    
    // Open/create backup file (O_WRONLY | O_CREAT = 193, mode 432 = 0660)
    output_fd = open(backup_path, O_WRONLY | O_CREAT, 0660);
    if (output_fd < 0) {
        printf("ERROR: Failed to open %s%s\n", "./backups/", argv[1]);
        exit(1);
    }
    
    // Copy file byte by byte
    while (1) {
        ch = fgetc(input_file);
        if (ch == -1)  // EOF
            break;
        write(output_fd, &ch, 1);
    }
    
    // Log completion
    log_wrapper(log_file, "Finished back up ", argv[1]);
    
    // Clean up
    fclose(input_file);
    close(output_fd);
    fclose(log_file);
    
    return 0;
}